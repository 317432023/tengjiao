<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>tengjiao-seed</artifactId>
        <groupId>com.tengjiao</groupId>
        <version>1.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>tengjiao-seed-templet-admin</artifactId>

    <properties>
        <!-- 打包名称 -->
        <scripts_packageName>${project.artifactId}</scripts_packageName>
        <!--<scripts_packageName>template-admin</scripts_packageName>-->
        <!-- 主程序 -->
        <scripts_bootMain>com.tengjiao.seed.templet.admin.TempletMain</scripts_bootMain>
    </properties>

    <!-- springboot 打包方式三 -->
    <profiles>
        <!-- profile中定义了三个变量 package-name activeProfile boot-main 能被传递到assembly.xml中-->
        <profile>
            <id>dev</id>
            <properties>
                <!--传递给脚本的参数值-->
                <activeProfile>dev</activeProfile>
                <package-name>${scripts_packageName}</package-name>
                <boot-main>${scripts_bootMain}</boot-main>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <activeProfile>test</activeProfile>
                <package-name>${scripts_packageName}</package-name>
                <boot-main>${scripts_bootMain}</boot-main>
            </properties>
        </profile>
        <profile>
            <id>uat</id>
            <properties>
                <activeProfile>uat</activeProfile>
                <package-name>${scripts_packageName}</package-name>
                <boot-main>${scripts_bootMain}</boot-main>
            </properties>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>com.tengjiao</groupId>
            <artifactId>tengjiao-part-springboot</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tengjiao</groupId>
            <artifactId>tengjiao-seed-admin-sys</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <!--Lombok 简化 getter 和 setter-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- 测试库 for SpringBoot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-logging</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <finalName>${scripts_packageName}</finalName>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.json</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>

        <!-- springboot 打包方式一 全部单独打包成一个文件 -->
        <!--
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${springboot.version}</version>
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <mainClass>${scripts_bootMain}</mainClass>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        -->

        <!-- springboot 打包方式二 分离配置文件、主程序和依赖库 -->
        <plugins>
            <!-- 配置文件与资源文件 拷贝到config目录 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- 配置文件输出到单独的目录 config，这些文件最终不打包到jar中 -->
                            <outputDirectory>${project.build.directory}/config</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <!-- 特殊的资源文件不输出到单独的目录，这些文件最终会打包到jar中 -->
                                    <excludes>
                                        <exclude>**/i18n/**</exclude>
                                        <exclude>**/mybatis/**</exclude>
                                        <exclude>**/public/**</exclude>
                                        <exclude>**/static/**</exclude>
                                        <exclude>**/templates/**</exclude>
                                        <exclude>**/db/**</exclude>
                                        <exclude>spy.properties</exclude>
                                        <exclude>rebel.xml</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 配置文件与资源文件 不打进主程序jar包
                 主程序jar包的META-INFO/MANIFEST文件写入依赖jar定义
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <excludes>
                        <exclude>**/application*.yml</exclude>
                        <exclude>**/application*.properties</exclude>
                        <exclude>**/logback*.xml</exclude>
                        <exclude>**/log4j*.xml</exclude>
                        <exclude>**/bootstrap.yml</exclude>
                        <exclude>**/setting.properties</exclude>
                        <exclude>**/rebel.xml</exclude>
                        <exclude>**/*.sh</exclude>
                    </excludes>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <useUniqueVersions>false</useUniqueVersions>
                            <mainClass>${scripts_bootMain}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- 依赖库单独输出到 lib 目录，不打进主程序 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!--
                            各子模块按照实际层级定义各模块对应的属性值，检查所有微服务模块依赖jar文件合并复制到同一个目录
                            详见各子模块中 boot-jar-output 属性定义
                            -->
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <stripVersion>false</stripVersion>
                            <!--<silent>true</silent>-->
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- springboot 重新打主程序jar包，排除所有maven依赖jar -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${springboot.version}</version>
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <mainClass>${scripts_bootMain}</mainClass>
                    <!-- 排除所有maven依赖jar -->
                    <includes>
                        <include>
                            <groupId>null</groupId>
                            <artifactId>null</artifactId>
                        </include>
                    </includes>
                    <layout>ZIP</layout>
                    <!--<outputDirectory>${boot-jar-output}</outputDirectory>-->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!-- 重新打包成springboot的可运行jar包 -->
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

        <!-- springboot 打包方式三 分离配置文件、主程序和依赖库
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <archive>
                        <addMavenDescriptor>false</addMavenDescriptor>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>${scripts_bootMain}</mainClass>
                        </manifest>
                    </archive>
                    <excludes>
                        <exclude>**/*.yml</exclude>
                        <exclude>**/*.properties</exclude>
                        <exclude>**/*.xml</exclude>
                        <exclude>**/*.sh</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>make-a-jar</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>bak</classifier>
                            <classesDirectory>${project.build.directory}/</classesDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <descriptors>
                        <descriptor>${project.basedir}/src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
         -->


    </build>

</project>